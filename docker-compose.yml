version: '3.8'

services:
  # Combined backend application (both backend and chatbackend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kidsden-app
    ports:
      - "3000:3000"  # Backend port
      - "8000:8000"  # Chatbackend port
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      # Don't strictly depend on kafka - let startup script handle it
      kafka:
        condition: service_started
    environment:
      # Environment configuration
      - NODE_ENV=production
      - ENVIRONMENT=docker
      
      # Backend service port
      - BACKEND_PORT=3000
      - CHATBACKEND_PORT=8000
      
      # Database connections
      - MONGO_URI=mongodb://root:root@mongodb:27017/schooldb?authSource=admin
      - CHAT_MONGO_URI=mongodb://root:root@mongodb:27017/chatdb?authSource=admin
      
      # Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # Kafka configuration
      - KAFKA_BROKERS=kafka:9092
      - KAFKA_HOST=kafka
      - KAFKA_PORT=9092
      
      # Application secrets (should be set via environment variables in production)
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - RAZORPAY_KEY_ID=${RAZORPAY_KEY_ID:-your_razorpay_key_id}
      - RAZORPAY_KEY_SECRET=${RAZORPAY_KEY_SECRET:-your_razorpay_key_secret}
      
      # Email configuration (optional)
      - SMTP_HOST=${SMTP_HOST:-}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASS=${SMTP_PASS:-}

      # AWS Variables
      - AWS_REGION=
      - AWS_ACCESS_KEY_ID=
      - AWS_SECRET_ACCESS_KEY=
      - S3_BUCKET=
      - S3_PRESIGN=
      - S3_PREESIGN_EXPIRES=
      
    volumes:
      # Mount logs directory for debugging
      - ./logs:/app/logs
    networks:
      - kidsden-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health", "||", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB service
  mongodb:
    image: mongo:latest
    container_name: kidsden-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - kidsden-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis service
  redis:
    image: redis:alpine
    container_name: kidsden-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - kidsden-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3

  # Zookeeper service (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: kidsden-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 3000
      # Optimized memory settings for t2.medium (4GB RAM)
      KAFKA_HEAP_OPTS: "-Xmx1G -Xms512M"
      ZOOKEEPER_HEAP_OPTS: "-Xmx1G -Xms512M"
      # Improved connection and performance settings
      ZOOKEEPER_MAX_CLIENT_CNXNS: 100
      ZOOKEEPER_INIT_LIMIT: 10
      ZOOKEEPER_SYNC_LIMIT: 5
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 5
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
      ZOOKEEPER_JUTE_MAX_BUFFER: 4194304
      # Enable four letter word commands for health checks
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - kidsden-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1.5G
          cpus: '0.5'
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/commands/stat"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Kafka service
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kidsden-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      # Aggressive optimization for EC2
      KAFKA_HEAP_OPTS: "-Xmx256M -Xms128M"
      KAFKA_JVM_PERFORMANCE_OPTS: "-XX:+UseG1GC -XX:MaxGCPauseMillis=20 -XX:InitiatingHeapOccupancyPercent=35 -XX:+DisableExplicitGC -XX:MaxMetaspaceSize=128m"
      # Reduce startup time and resource usage
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_NETWORK_THREADS: 2
      KAFKA_NUM_IO_THREADS: 4
      # Reduce memory footprint
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
      # Minimize background threads
      KAFKA_BACKGROUND_THREADS: 4
      # Reduce log retention to save disk space and memory
      KAFKA_LOG_RETENTION_HOURS: 24
      KAFKA_LOG_RETENTION_BYTES: 268435456
      KAFKA_LOG_SEGMENT_BYTES: 67108864
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      # Disable unnecessary features for simple setups
      KAFKA_CONTROLLED_SHUTDOWN_ENABLE: 'false'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - kidsden-network
    restart: unless-stopped
    stop_grace_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 300s
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server localhost:9092 --list > /dev/null 2>&1"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 120s

# Create a custom network for service communication
networks:
  kidsden-network:
    driver: bridge

# Define persistent volumes
volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local